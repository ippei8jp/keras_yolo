diff --git a/tools/evaluation/validate_yolo.py b/tools/evaluation/validate_yolo.py
index 5991f51..f7a897e 100644
--- a/tools/evaluation/validate_yolo.py
+++ b/tools/evaluation/validate_yolo.py
@@ -6,8 +6,8 @@ import os, sys, argparse
 import numpy as np
 from operator import mul
 from functools import reduce
-import MNN
-import onnxruntime
+# import MNN
+# import onnxruntime
 from tensorflow.keras.models import load_model
 from tensorflow.lite.python import interpreter as interpreter_wrapper
 import tensorflow as tf
@@ -22,7 +22,7 @@ from common.utils import get_classes, get_anchors, get_colors, draw_boxes, get_c
 os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
 
 
-def validate_yolo_model(model_path, image_file, anchors, class_names, model_image_size, elim_grid_sense, v5_decode, loop_count):
+def validate_yolo_model(model_path, image_file, anchors, class_names, model_image_size, elim_grid_sense, v5_decode, loop_count, output_image=None):
 
     custom_object_dict = get_custom_objects()
     model = load_model(model_path, compile=False, custom_objects=custom_object_dict)
@@ -46,6 +46,10 @@ def validate_yolo_model(model_path, image_file, anchors, class_names, model_imag
 
     prediction.sort(key=lambda x: len(x[0]))
     handle_prediction(prediction, image_file, image, image_shape, anchors, class_names, model_image_size, elim_grid_sense, v5_decode)
+    
+    if output_image :
+        Image.fromarray(image).save(output_image)
+
     return
 
 
@@ -373,6 +377,7 @@ def main():
     parser.add_argument('--elim_grid_sense', help="Eliminate grid sensitivity", default=False, action="store_true")
     parser.add_argument('--v5_decode', help="Use YOLOv5 prediction decode", default=False, action="store_true")
     parser.add_argument('--loop_count', help='loop inference for certain times', type=int, default=1)
+    parser.add_argument('--output_image', help='output image file name', type=str, default=None)
 
     args = parser.parse_args()
 
@@ -397,7 +402,7 @@ def main():
         validate_yolo_model_onnx(args.model_path, args.image_file, anchors, class_names, args.elim_grid_sense, args.v5_decode, args.loop_count)
     # normal keras h5 model
     elif args.model_path.endswith('.h5'):
-        validate_yolo_model(args.model_path, args.image_file, anchors, class_names, model_image_size, args.elim_grid_sense, args.v5_decode, args.loop_count)
+        validate_yolo_model(args.model_path, args.image_file, anchors, class_names, model_image_size, args.elim_grid_sense, args.v5_decode, args.loop_count, output_image=args.output_image)
     else:
         raise ValueError('invalid model file')
 
diff --git a/yolo.py b/yolo.py
index 24960db..8030ef5 100644
--- a/yolo.py
+++ b/yolo.py
@@ -28,7 +28,7 @@ from common.utils import get_classes, get_anchors, get_colors, draw_boxes, optim
 #from tensorflow.keras.utils import multi_gpu_model
 
 os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
-os.environ['CUDA_VISIBLE_DEVICES'] = '0'
+os.environ['CUDA_VISIBLE_DEVICES'] = '-1'       # GPU使用しない
 
 optimize_tf_gpu(tf, K)
 
diff --git a/yolo2/model.py b/yolo2/model.py
index 2832c40..2527e85 100644
--- a/yolo2/model.py
+++ b/yolo2/model.py
@@ -22,7 +22,8 @@ from yolo2.postprocess import batched_yolo2_postprocess
 
 from common.model_utils import add_metrics, get_pruning_model
 
-ROOT_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..')
+# ROOT_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..')
+ROOT_PATH = os.getcwd()
 
 # A map of model type to construction info list for YOLOv2
 #
diff --git a/yolo3/model.py b/yolo3/model.py
index 72568fe..3a7dab8 100644
--- a/yolo3/model.py
+++ b/yolo3/model.py
@@ -42,7 +42,8 @@ from yolo3.postprocess import batched_yolo3_postprocess, batched_yolo3_prenms, Y
 
 from common.model_utils import add_metrics, get_pruning_model
 
-ROOT_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..')
+# ROOT_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..')
+ROOT_PATH = os.getcwd()
 
 # A map of model type to construction info list for YOLOv3
 #
